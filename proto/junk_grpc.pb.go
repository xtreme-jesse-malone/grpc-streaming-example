// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package junk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JunkClient is the client API for Junk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JunkClient interface {
	TakeJunk(ctx context.Context, opts ...grpc.CallOption) (Junk_TakeJunkClient, error)
}

type junkClient struct {
	cc grpc.ClientConnInterface
}

func NewJunkClient(cc grpc.ClientConnInterface) JunkClient {
	return &junkClient{cc}
}

func (c *junkClient) TakeJunk(ctx context.Context, opts ...grpc.CallOption) (Junk_TakeJunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &Junk_ServiceDesc.Streams[0], "/junk.Junk/TakeJunk", opts...)
	if err != nil {
		return nil, err
	}
	x := &junkTakeJunkClient{stream}
	return x, nil
}

type Junk_TakeJunkClient interface {
	Send(*JunkMsg) error
	CloseAndRecv() (*EmptyMsg, error)
	grpc.ClientStream
}

type junkTakeJunkClient struct {
	grpc.ClientStream
}

func (x *junkTakeJunkClient) Send(m *JunkMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *junkTakeJunkClient) CloseAndRecv() (*EmptyMsg, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JunkServer is the server API for Junk service.
// All implementations must embed UnimplementedJunkServer
// for forward compatibility
type JunkServer interface {
	TakeJunk(Junk_TakeJunkServer) error
	mustEmbedUnimplementedJunkServer()
}

// UnimplementedJunkServer must be embedded to have forward compatible implementations.
type UnimplementedJunkServer struct {
}

func (UnimplementedJunkServer) TakeJunk(Junk_TakeJunkServer) error {
	return status.Errorf(codes.Unimplemented, "method TakeJunk not implemented")
}
func (UnimplementedJunkServer) mustEmbedUnimplementedJunkServer() {}

// UnsafeJunkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JunkServer will
// result in compilation errors.
type UnsafeJunkServer interface {
	mustEmbedUnimplementedJunkServer()
}

func RegisterJunkServer(s grpc.ServiceRegistrar, srv JunkServer) {
	s.RegisterService(&Junk_ServiceDesc, srv)
}

func _Junk_TakeJunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JunkServer).TakeJunk(&junkTakeJunkServer{stream})
}

type Junk_TakeJunkServer interface {
	SendAndClose(*EmptyMsg) error
	Recv() (*JunkMsg, error)
	grpc.ServerStream
}

type junkTakeJunkServer struct {
	grpc.ServerStream
}

func (x *junkTakeJunkServer) SendAndClose(m *EmptyMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *junkTakeJunkServer) Recv() (*JunkMsg, error) {
	m := new(JunkMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Junk_ServiceDesc is the grpc.ServiceDesc for Junk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Junk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "junk.Junk",
	HandlerType: (*JunkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TakeJunk",
			Handler:       _Junk_TakeJunk_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "junk.proto",
}
